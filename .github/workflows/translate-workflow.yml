# This is a basic workflow to help you get started with Actions

name: Translate

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
    paths:
      - "**"
      - "!.github/dependabot.yml"
  pull_request:
    branches: [ "main" ]
    paths:
      - "**"
      - "!.github/dependabot.yml"

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "translate"
  translate:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    permissions:
      # Give the default GITHUB_TOKEN write permission to commit and push the
      # added or changed files to the repository.
      contents: write

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - uses: robinraju/release-downloader@v1.8
        with: 
          # The source repository path.
          # Expected format {owner}/{repo}
          # Default: ${{ github.repository }}
          repository: "EFA-FHB/file-translator"
          
          # A flag to set the download target as latest release
          # The default value is 'false'
          latest: true
          
          # The github tag. e.g: v1.0.1
          # Download assets from a specific tag/version
          #tag: ""
          
          # The release id to download files from 
          #releaseId: ""
          
          # The name of the file to download.
          # Use this field only to specify filenames other than tarball or zipball, if any.
          # Supports wildcard pattern (eg: '*', '*.deb', '*.zip' etc..)
          fileName: "*"
          
          # Download the attached tarball (*.tar.gz)
          tarBall: true
          
          # Download the attached zipball (*.zip)
          zipBall: true
          
          # Relative path under $GITHUB_WORKSPACE to place the downloaded file(s)
          # It will create the target directory automatically if not present
          # eg: out-file-path: "my-downloads" => It will create directory $GITHUB_WORKSPACE/my-downloads
          out-file-path: "file-translate"

          # A flag to set if the downloaded assets are archives and should be extracted
          # Checks all downloaded files if they end with zip, tar or tar.gz and extracts them, if true.
          # Prints a warning if enabled but file is not an archive - but does not fail.
          extract: true

          # Github access token to download files from private repositories
          # https://docs.github.com/en/actions/configuring-and-managing-workflows/creating-and-storing-encrypted-secrets

          #token: ${{ secrets.GITHUB_TOKEN }}
          token: ${{ secrets.TRANSLATE_TOKEN_2 }}

          # The URL of the Github API, only use this input if you are using Github Enterprise
          # Default: "https://api.github.com"
          # Use http(s)://[hostname]/api/v3 to access the API for GitHub Enterprise Server
          #github-api-url: ""

      # Runs a single command using the runners shell

      - name: Set file permissions
        run: chmod +x file-translate/file-translator

      - name: Get all md files that have changed
        id: changed-files-md-yaml
        uses: tj-actions/changed-files@v39
        with:
          files_yaml: |
            doc:
              - '**/*.md'
              - '!**/*_en.md'
      - name: Update Deepl glossary if doc file(s) changed
        id: glossary_update
        uses: mathiasvr/command-output@v2.0.0
        with:
          shell: bash
          run: |
            set -x
            ./file-translate/file-translator upg --name=evergabe-glossary --src-lang=de --target-lang=en --api-key=${{ secrets.DEEPL_API_KEY }} --entries="Vermittlungsdienst,Vermittlungsdienst"

      - name: Translate if doc file(s) changed
        if: steps.changed-files-md-yaml.outputs.doc_any_changed == 'true'
        shell: bash
        run: |
          set -x
          echo "One or more doc file(s) has changed."
          echo "Using Glossary ID ${{steps.glossary_update.outputs.stdout}}"
          for file in ${{ steps.changed-files-md-yaml.outputs.doc_all_changed_files }}; do
            echo "$file changed"
            filedir=$(dirname "$file")
            filename=$(basename -- "$file")
            extension="${filename##*.}"
            filename="${filename%.*}"
            tmp=$(mktemp)
            ./file-translate/file-translator trans -i $file -o $tmp --api-key ${{ secrets.DEEPL_API_KEY }} --glossary-id ${{steps.glossary_update.outputs.stdout}}

            if [[ $(cat $tmp | wc -l) -gt 0 ]]; then
              mv $tmp ${filedir}/${filename}_en.md
            else
              echo "received empty file from file-translator for $filename"
            fi
          done
          
      - name: Cleanup translate tool
        run: rm -rf ./file-translate

      - name: Auto-Commit translated files
        uses: stefanzweifel/git-auto-commit-action@v4
        with:
          # Optional. Commit message for the created commit.
          # Defaults to "Apply automatic changes"
          commit_message: Commit automatic translations
      
          # Optional glob pattern of files which should be added to the commit
          # Defaults to all (.)
          # See the `pathspec`-documentation for git
          # - https://git-scm.com/docs/git-add#Documentation/git-add.txt-ltpathspecgt82308203
          # - https://git-scm.com/docs/gitglossary#Documentation/gitglossary.txt-aiddefpathspecapathspec
          file_pattern: '*.md'
          disable_globbing: true
